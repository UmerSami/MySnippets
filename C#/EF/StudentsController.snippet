<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>StudentsController</Title>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID></ID>
          <Default></Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp">
        <![CDATA[ 
        using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web;
using System.Web.Http;
using MvcApplication38.Models;
using System.Threading.Tasks;
using System.Threading;

namespace Controllers.Api
{
    public class StudentsController : ApiController
    {
        private SchoolContext db = new SchoolContext();

        // GET api/Students
        [Queryable]
        public IHttpActionResult GetStudent()
        {
            return Content(HttpStatusCode.OK, db.Students);
        }

        // GET api/Students/5
        public async Task<IHttpActionResult> GetStudent(int id)
        {
            Student student = await db.Students.FindAsync<Student>(id);
            if (student == null)
            {
                return StatusCode(HttpStatusCode.NotFound);
            }

            return Content(HttpStatusCode.OK, student);
        }

        // PUT api/Students/5
        public async Task<IHttpActionResult> PutStudent(int id, Student student, CancellationToken token)
        {
            if (!ModelState.IsValid)
            {
                return Message(Request.CreateErrorResponse(HttpStatusCode.BadRequest, ModelState));
            }

            if (id != student.Id)
            {
                return StatusCode(HttpStatusCode.BadRequest);
            }

            db.Entry(student).State = EntityState.Modified;

            try
            {
                await db.SaveChangesAsync(token);
            }
            catch (DbUpdateConcurrencyException ex)
            {
                return Message(Request.CreateErrorResponse(HttpStatusCode.NotFound, ex));
            }

            return StatusCode(HttpStatusCode.OK);
        }

        // POST api/Students
        public async Task<IHttpActionResult> PostStudent(Student student, CancellationToken token)
        {
            if (ModelState.IsValid)
            {
                db.Students.Add(student);
                await db.SaveChangesAsync(token);

                HttpResponseMessage response = Request.CreateResponse(HttpStatusCode.Created, student);
                response.Headers.Location = new Uri(Url.Link("DefaultApi", new { id = student.Id }));
                return Message(response);
            }
            else
            {
                return Message(Request.CreateErrorResponse(HttpStatusCode.BadRequest, ModelState));
            }
        }

        // DELETE api/Students/5
        public async Task<IHttpActionResult> DeleteStudent(int id, CancellationToken token)
        {
            Student student = await db.Students.FindAsync<Student>(id);
            if (student == null)
            {
                return StatusCode(HttpStatusCode.NotFound);
            }

            db.Students.Remove(student);

            try
            {
                await db.SaveChangesAsync(token);
            }
            catch (DbUpdateConcurrencyException ex)
            {
                return Message(Request.CreateErrorResponse(HttpStatusCode.NotFound, ex));
            }

            return Content(HttpStatusCode.OK, student);
        }

        protected override void Dispose(bool disposing)
        {
            db.Dispose();
            base.Dispose(disposing);
        }
    }
}
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
