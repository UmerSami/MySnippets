<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>RouteInfoController</Title>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID></ID>
          <Default></Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp">
        <![CDATA[ 
        using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Web;
using System.Web.Http;
using System.Web.Http.Routing;

namespace WebHostSampleApp.Controllers
{
    public class RouteInfoController : ApiController
    {
        [HttpGet("api/routeinfo")]
        public HttpResponseMessage Get()
        {
            string str = GetRoutesInfo(Request.GetConfiguration().Routes);

            return new HttpResponseMessage() { Content = new StringContent(str) };
        }

        private static string GetRoutesInfo(HttpRouteCollection routes)
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();

            foreach (var route in routes)
            {
                sb.AppendLine();
                sb.AppendLine("***********************************");
                sb.AppendFormat("RouteTemplate: {0}", route.RouteTemplate);
                sb.AppendLine();
                sb.AppendLine("-----------------------------------");
                sb.AppendLine("Defaults:");
                sb.AppendLine("--------");
                if (route.Defaults.Count > 0)
                {
                    foreach (string key in route.Defaults.Keys)
                    {
                        sb.AppendFormat("Key:{0}, Value:{1}", key,
                            (route.Defaults[key] == RouteParameter.Optional) ? "Optional" : route.Defaults[key].ToString());
                        sb.AppendLine();
                    }
                }
                else
                {
                    sb.AppendLine("No default values");
                }

                sb.AppendLine();
                sb.AppendLine("Constraints:");
                sb.AppendLine("-----------");
                if (route.Constraints.Count > 0)
                {
                    foreach (string key in route.Constraints.Keys)
                    {
                        IHttpRouteConstraint routeConstraint = route.Constraints[key] as IHttpRouteConstraint;

                        string info = null;
                        HttpMethodConstraint methodCosntraint = routeConstraint as HttpMethodConstraint;
                        if (methodCosntraint != null)
                        {
                            info = string.Join(", ", methodCosntraint.AllowedMethods.Select(httpMethod => httpMethod.Method));
                        }
                        else
                        {
                            info = routeConstraint.ToString();
                        }

                        sb.AppendFormat("Key:{0}, Value:{1}", key, info);
                        sb.AppendLine();
                    }
                }
                else
                {
                    sb.AppendLine("No constraints");
                }

                Console.WriteLine();
            }

            return sb.ToString();
        }
    }

    public class ShortCircuitingAuthorizationFilter : AuthorizeAttribute
    {
        public override void OnAuthorization(System.Web.Http.Controllers.HttpActionContext actionContext)
        {
            actionContext.Response = new HttpResponseMessage()
            {
                Content = new StringContent(string.Format("Controller: {0}{1}Action: {2}",
                                    actionContext.ControllerContext.ControllerDescriptor.ControllerName,
                                    Environment.NewLine,
                                    actionContext.ActionDescriptor.ActionName
        ))
            };
        }
    }      
}
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
