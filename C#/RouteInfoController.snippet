<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>RouteInfoController</Title>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID></ID>
          <Default></Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp">
        <![CDATA[ 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Controllers;
using System.Web.Http.Routing;

namespace SampleOwinApp
{
    public class RouteInfoController : ApiController
    {
        [HttpGet("api/routeinfo")]
        public HttpResponseMessage Get()
        {
            string str = GetRoutesInfo(Request.GetConfiguration().Routes);

            return new HttpResponseMessage() { Content = new StringContent(str) };
        }

        private static string GetRoutesInfo(HttpRouteCollection webApiRoutes)
        {
            StringBuilder routesInfoBuilder = new StringBuilder();

            routesInfoBuilder.AppendLine();
            routesInfoBuilder.AppendLine();
            routesInfoBuilder.AppendFormat("Web API Routes (Total: {0}):", webApiRoutes.Count);
            routesInfoBuilder.AppendLine();
            routesInfoBuilder.AppendLine("-----------------------------");

            foreach (IHttpRoute route in webApiRoutes)
            {
                routesInfoBuilder.AppendFormat("config.Routes.MapHttpRoute(\"{0}\", \"{1}\", new {{ {2} }}, new {{ {3} }}, new {{ {4} }});",
                    "routeName",
                    route.RouteTemplate,
                    GetRouteDefaults(route.Defaults),
                    GetRouteConstraints(route.Constraints),
                    GetDataTokens(route.DataTokens));

                routesInfoBuilder.AppendLine();
            }

            return routesInfoBuilder.ToString();
        }

        private static string GetRouteConstraints(IDictionary<string, object> routeValueDictionary)
        {
            if (routeValueDictionary != null)
            {
                return string.Join(", ", routeValueDictionary.Keys.Select(key =>
                {
                    string cnst = string.Empty;
                    if (routeValueDictionary[key] is HttpMethodConstraint)
                    {
                        HttpMethodConstraint methodConstraint = routeValueDictionary[key] as HttpMethodConstraint;

                        cnst = string.Format("{0} = HttpMethodConstraints[{1}]", key, string.Join(", ", methodConstraint.AllowedMethods));
                    }
                    else
                    {
                        cnst = string.Format("{0} = {1}", key, routeValueDictionary[key].GetType().Name);
                    }

                    return cnst;
                }));
            }

            return string.Empty;
        }

        private static string GetRouteDefaults(IDictionary<string, object> routeValueDictionary)
        {
            if (routeValueDictionary != null && routeValueDictionary.Keys.Count > 0)
            {
                return string.Join(", ", routeValueDictionary.Keys.Select(key => string.Format("{0} = \"{1}\"", key,
                                    ((routeValueDictionary[key] == RouteParameter.Optional) ? "RouteParameter.Optional" : routeValueDictionary[key].ToString()))));
            }

            return string.Empty;
        }

        private static string GetDataTokens(IDictionary<string, object> routeValueDictionary)
        {
            if (routeValueDictionary != null && routeValueDictionary.Keys.Count > 0)
            {
                return string.Join(", ", routeValueDictionary.Keys.Select(key =>
                {
                    string dataToken = string.Empty;

                    if (routeValueDictionary[key] != null && (routeValueDictionary[key].GetType() == typeof(ReflectedHttpActionDescriptor[])))
                    {
                        ReflectedHttpActionDescriptor[] descriptors = (ReflectedHttpActionDescriptor[])routeValueDictionary[key];

                        dataToken = string.Format("{0} = [{1}]", key, string.Join(", ", string.Join(",", descriptors.Select(refDesc => GetMethoName(refDesc.MethodInfo)))));
                    }
                    else
                    {
                        dataToken = string.Format("{0} = {1}", key, routeValueDictionary[key].GetType().Name);
                    }

                    return dataToken;
                }));
            }

            return string.Empty;
        }

        private static string GetMethoName(MethodInfo mi)
        {
            string methodName = string.Empty;

            string methodNameFormat = string.Format("{0}({{0}})", mi.Name);

            if (mi.GetParameters().Length != 0)
            {
                methodName = string.Format(methodNameFormat, string.Join(", ", mi.GetParameters().Select(pi => pi.ParameterType.Name + " " + pi.Name)));
            }

            return methodName;
        }
    }
}


        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
